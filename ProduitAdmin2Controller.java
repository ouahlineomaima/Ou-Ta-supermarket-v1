package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.AnchorPane;
import javafx.scene.control.TableColumn;

public class ProduitAdmin2Controller implements Initializable {
	@FXML
	private TableView<Produit> tableproduitadmin = new TableView<Produit>();
	@FXML
	private TableColumn<Produit, String> clidproduit = new TableColumn<Produit, String>(); 
	@FXML
	private TableColumn<Produit, String> clnom = new TableColumn<Produit, String>();
	@FXML
	private TableColumn<Produit, Integer> clquantite = new TableColumn<Produit, Integer>();
	@FXML
	private TableColumn<Produit, Service> clservice = new TableColumn<Produit, Service>();
	@FXML
	private TableColumn<Produit, Integer> clprix = new TableColumn<Produit, Integer>();
	@FXML
	private Button btnajouterproduit;
	@FXML
	private Button btnsupprimerproduitadmin;
	@FXML
	private Button btnmodifieradmin;
	@FXML
	private Button btnajouterpanier;
	@FXML
	private Button btnretouradmin;
	@FXML
	private Button btnpanier;
	@FXML
	private Button btnactualiser;
	@FXML
    private Button btndisconnection;
	@FXML
	private Spinner<Integer> spinner = new Spinner<Integer>();
	
	
	static SceneAjouterProduitAdmin s = new SceneAjouterProduitAdmin();
	static SceneModifierProduitAdmin s2 = new SceneModifierProduitAdmin();
	static Produit p = new Produit();
	static TableServiceController t = new TableServiceController();
	static ObservableList<Produit> items = Data.getProduit(TableServiceController.service);
	static ObservableList<Produit> panieritems = FXCollections.observableArrayList();
	
	
	
	public void initialize(URL arg0, ResourceBundle arg1) {
		items = Data.getProduit(TableServiceController.service);
		if (items.size()>1) {
			int max = items.get(0).getQuantite();
			for (int i =1; i<items.size(); i++) {
				if (max < items.get(i).getQuantite()) {
					max = items.get(i).getQuantite();
				}
			}
			int initialValue = 0;
			SpinnerValueFactory<Integer> valueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, max, initialValue);
	        spinner.setValueFactory(valueFactory);
			clidproduit.setCellValueFactory(new PropertyValueFactory<Produit, String>("idProduit"));
			clnom.setCellValueFactory(new PropertyValueFactory<Produit, String>("nom"));
			clquantite.setCellValueFactory(new PropertyValueFactory<Produit, Integer>("quantite"));
			clservice.setCellValueFactory(new PropertyValueFactory<Produit, Service>("service"));
			clprix.setCellValueFactory(new PropertyValueFactory<Produit, Integer>("prix"));
			tableproduitadmin.setItems(items);
			
		}
		else {
			if(items.size() == 1) {
				int initialValue = 0;
				int max = items.get(0).getQuantite();
				SpinnerValueFactory<Integer> valueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, max, initialValue);
		        spinner.setValueFactory(valueFactory);
				clidproduit.setCellValueFactory(new PropertyValueFactory<Produit, String>("idProduit"));
				clnom.setCellValueFactory(new PropertyValueFactory<Produit, String>("nom"));
				clquantite.setCellValueFactory(new PropertyValueFactory<Produit, Integer>("quantite"));
				clservice.setCellValueFactory(new PropertyValueFactory<Produit, Service>("service"));
				clprix.setCellValueFactory(new PropertyValueFactory<Produit, Integer>("prix"));
				tableproduitadmin.setItems(items);
			}
			else {
				int initialValue = 0;
				SpinnerValueFactory<Integer> valueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 0, initialValue);
		        spinner.setValueFactory(valueFactory);
				clidproduit.setCellValueFactory(new PropertyValueFactory<Produit, String>("idProduit"));
				clnom.setCellValueFactory(new PropertyValueFactory<Produit, String>("nom"));
				clquantite.setCellValueFactory(new PropertyValueFactory<Produit, Integer>("quantite"));
				clservice.setCellValueFactory(new PropertyValueFactory<Produit, Service>("service"));
				clprix.setCellValueFactory(new PropertyValueFactory<Produit, Integer>("prix"));
				tableproduitadmin.setItems(items);
				
			}
			
		}
		
	}

	// Event Listener on Button[#btnajouterproduit].onAction
	@FXML
	public void ajouterproduitbutton(ActionEvent event) {
		// TODO Autogenerated
		try {
			AnchorPane root = FXMLLoader.load(getClass().getResource("AjouterProduitAdmin.fxml"));
			SceneAjouterProduitAdmin.scene.setRoot(root);
			SceneAjouterProduitAdmin s = new SceneAjouterProduitAdmin();
			s.start(SceneAjouterProduitAdmin.principaleWindow);
		} catch (Exception e) {
		}
	}
	
	// Event Listener on Button[#btnsupprimerproduitadmin].onAction
	@FXML
	public void supprimerproduitadminbutton(ActionEvent event) {
		// TODO Autogenerated
		if(tableproduitadmin.getSelectionModel().getSelectedItem() != null) {
			int test = Data.supprimerProduit(tableproduitadmin.getSelectionModel().getSelectedItem().getIdProduit());
			if (test == 1) {
				initialize(null, null);
				Alert information = new Alert(Alert.AlertType.INFORMATION);
				information.setTitle("Opération réussie");
				information.setContentText("Le produit a été supprimé avec succès");
				information.setHeaderText(null);
				information.show();
			}
			if(test == 0) {
				Alert error = new Alert(Alert.AlertType.ERROR);
				error.setTitle("Opération échouée");
				error.setContentText("problème de connexion");
				error.setHeaderText(null);
				error.show();
			}
		}
		else {
			Alert error = new Alert(Alert.AlertType.ERROR);
			error.setTitle("Opération échouée");
			error.setContentText("Aucun produit sélectionné. Veuillez sélectionner un produit.");
			error.setHeaderText(null);
			error.show();
		}
	}
	
	// Event Listener on Button[#btnmodifieradmin].onAction
	@FXML
	public void modifieradminbutton(ActionEvent event) {
		// TODO Autogenerated
		if (tableproduitadmin.getSelectionModel().getSelectedItem() != null) {
			p = tableproduitadmin.getSelectionModel().getSelectedItem();
			AnchorPane root;
			try {
				root = FXMLLoader.load(getClass().getResource("ModifierProduitAdmin.fxml"));
				SceneModifierProduitAdmin.scene.setRoot(root);
				s2.start(SceneModifierProduitAdmin.principaleWindow);
			} catch (Exception e) {
			}
			
		}
		else {
			Alert error = new Alert(Alert.AlertType.ERROR);
			error.setTitle("Opération échouée");
			error.setContentText("Aucun produit sélectionné. Veuillez sélectionner un produit.");
			error.setHeaderText(null);
			error.show();
		}
	}
	
	// Event Listener on Button[#btnajouterpanier].onAction
	@FXML
	public void ajouterpanierbutton(ActionEvent event) {
		// TODO Autogenerated
		int quant = spinner.getValue();
		p = tableproduitadmin.getSelectionModel().getSelectedItem();
		if(p != null) {
			if (quant > p.getQuantite()) {
				Alert error = new Alert(Alert.AlertType.ERROR);
				error.setTitle("Opération échouée");
				error.setContentText("Quantité insuffisante dans le stock");
				error.setHeaderText(null);
				error.show();
			}
			else {
				if (quant != 0) {
					Produit p1 = new Produit("panier"+p.getIdProduit(), p.getNom(), quant, p.getService(), p.getPrix());
					if(panieritems.contains(p1)) {
						Alert error = new Alert(Alert.AlertType.ERROR);
						error.setTitle("Opération échouée");
						error.setContentText("Le produit figure déjà dans le panier");
						error.setHeaderText(null);
						error.show();
					}
					else {
						panieritems.add(p1);
						Alert information = new Alert(Alert.AlertType.INFORMATION);
						information.setTitle("Opération réussie");
						information.setContentText("Le produit a été ajouté au panier avec succès");
						information.setHeaderText(null);
						information.show();
					}
				}
				else {
					Alert error = new Alert(Alert.AlertType.ERROR);
					error.setTitle("Opération échouée");
					error.setContentText("Veuillez indiquer la quantité à ajouter");
					error.setHeaderText(null);
					error.show();
				}
			}
		}
		else {
			Alert error = new Alert(Alert.AlertType.ERROR);
			error.setTitle("Opération échouée");
			error.setContentText("Veuillez sélectionné un produit.");
			error.setHeaderText(null);
			error.show();
		}
		
	}
	
	// Event Listener on Button[#btnretouradmin].onAction
	@FXML
	public void retourproduitadminbutton(ActionEvent event){
		TableServiceController.service = new Service();
		AnchorPane root = null;
		try {
			root = FXMLLoader.load(getClass().getResource("TableService.fxml"));
		} catch (IOException e) {
		}
		GestionApp.scene.setRoot(root);
	}
	
	// Event Listener on Button[#btnpanier].onAction
	@FXML
	public void panierbutton(ActionEvent event) {
		AnchorPane root = null;
		try {
			root = FXMLLoader.load(getClass().getResource("Panier.fxml"));
		} catch (IOException e) {
		}
		GestionApp.scene.setRoot(root);
	}
	
	// Event Listener on Button[#btnactualiser].onAction
	@FXML
	public void actualiserHandler(ActionEvent event) {
		items.clear();
		tableproduitadmin.setItems(items);
		initialize(null, null);
		items.clear();
		tableproduitadmin.setItems(items);
		initialize(null, null);
	}
	
	//Event Listener on Button[#btndisconnection].onAction
	@FXML
    private void disconnectionHandler(ActionEvent event) {
    	Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);
    	confirm.setTitle("Confirmer la déconnexion");
    	confirm.setContentText("Êtes vous sûr de vouloir se déconnecter?");
    	confirm.setHeaderText(null);
    	confirm.getButtonTypes().removeAll(ButtonType.OK, ButtonType.CANCEL);
		ButtonType btnOui = new ButtonType("Oui");
		ButtonType btnNon = new ButtonType("Annuler");
		confirm.getButtonTypes().addAll(btnOui, btnNon);
		Optional<ButtonType> result = confirm.showAndWait();
		if(result.get()==btnOui) {
			AnchorPane root = null;
			try {
				root = FXMLLoader.load(getClass().getResource("Login2.fxml"));
				GestionApp.scene.setRoot(root);
				GestionApp.principaleWindow.setWidth(624);
			} catch (IOException e) {
				// TODO Auto-generated catch block
			}
			
		}
    }

}
